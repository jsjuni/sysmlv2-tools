/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package sysml2oml;

import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

import javax.xml.parsers.ParserConfigurationException;
import javax.xml.xpath.XPathExpressionException;

import org.slf4j.Logger;

import com.beust.jcommander.JCommander;
import com.beust.jcommander.Parameter;

import com.opencsv.exceptions.CsvValidationException;

public class App {
	@Parameter(
			names = { "--input-path", "-i" }, 
			description = "Path to search for input", 
			required = true, 
			order = 1)
	private static List<String> inputPaths = new ArrayList<>();

	@Parameter(
			names = { "--core-vocabularies-path", "-v" }, 
			description = "Path for core vocabularies", 
			required = true, 
			order = 1)
	private static String coreVocabsPath;

	@Parameter(
			names = { "--bundle-stem" }, 
			description = "Stem for bundle", 
			required = false, 
			order = 1)
	private static String bundleStem;

	@Parameter(
			names = { "--output-path", "-o" }, 
			description = "Output path", 
			required = true, 
			order = 1)
	private static String outputPath;

	@Parameter(
			names = { "--metaclass", "-m" }, 
			description = "Metaclass to map to concept", 
			required = true, 
			order = 1)
	private static Set<String> metaclasses = new HashSet<>();

	@Parameter(
			names = { "--supertypes-map", "-s" }, 
			description = "Path to search for input", 
			required = true, 
			order = 1)
	private static String mapFile;

	@Parameter(
			names = { "--catalog-path", "-c" }, 
			description = "File path for output catalog", 
			required = false, 
			order = 1)
	private static String catalogPath;

	@Parameter(
			names = { "--edgelist-path", "-e" }, 
			description = "File path for output edgelist", 
			required = false, 
			order = 1)
	private static String edgelistPath;

	@Parameter(
			names = { "--help", "-h" },
			description = "Displays summary of options",
			help = true,
			order = 7)
	private boolean help;

    public static void main(String[] args) throws CsvValidationException, FileNotFoundException, IOException, ParserConfigurationException, XPathExpressionException {
    	final App app = new App();
		final JCommander builder = JCommander.newBuilder().addObject(app).build();
		
		builder.parse(args);
		if (app.help) {
			builder.usage();
			return;
		}
		
		Logger logger = org.slf4j.LoggerFactory.getLogger(App.class);
				
		Taxonomy2Oml taxonomy2Oml = new Taxonomy2Oml(logger, inputPaths, coreVocabsPath, bundleStem, outputPath, metaclasses, mapFile,
				catalogPath, edgelistPath);
		
        taxonomy2Oml.run();
    }
}
